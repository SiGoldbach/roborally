@startuml
'https://plantuml.com/sequence-diagram


class AppController{
-List<Integer> PLAYER_NUMBER_OPTIONS
-List<String> PLAYER_COLORS
-RoboRally roboRally
-GameController gameController
+void connectToGame()
+void saveGame()
+void hostGame()
+boolean stopGame()
+void exit()
+boolean isGameRunning()

}

class Checkpoint{
-int checkpointsRequired

}

class NetworkService {
-int gameRoomNumber
-int playerNumber
-String recieveMessage
-GameController gameController
+NetworkService()

}

class ServerClientController {
+List possibleBoards()
+void saveboard()
+String startGame()
+String hostGame()
+String connectToGame()
+String refresh()
+String lockin()
+String playturn()

}
class BoardTemplate {
+int width
+int height
+Phase phase
+List<SpaceTemplate> spaces
+List<PlayerTemplate> players
}

class PlayerTemplate {
+int x
+int y
+int CheckpointAmount
+Heading heading
+String name
+String color
+boolean isCurrent
}

class SpaceTemplate {
+List<Heading> walls
+List<FieldAction> actions
+int x;
+int y;

}
class Adapter {
+JsonElement serialize()
+E deserialize()
-{static} String CLASSNAME
-{static} String INSTANCE
}

class IOUtil {
+ {static} String readString()
+ {static} String readResource()
}

class LoadBoard{
+ {static} String BOARDSFOLDER
+ {static} String DEFAULTBOARD
+ {static} String JSON_EXT
+ {static} Board loadBoard()
+ {static} String saveBoard()
}

abstract class "FieldAction"{
+boolean doAction()
}
class PlayerPositionGenerator {
+String toString();
+void updatePlayersPosition()

}
class BoardAnPositionOutOfSyncException {
+BoardAnPositionOutOfSyncException()
}

class FinishLine{
+doAction()
}

class GameController{
+Board board
+ void startProgrammingPhase()
-commandCard generateRandomCommandCard()
+void finishProgrammingPhase()
-void makeProgramFieldsVisible()
-void makeProgramFieldsInvisible()
+void executePrograms()
+void executeStep()
+void continuePrograms()
-void executeNextStep()
-void executeCommand()
+void moveForward()
+void moveForward()
+void fastForward()
+void turnRight()
+void turnLeft()
+void leftOrRight()
+void uTurn()
+void moveThree()
+void moveBack()
+void executeCommandAndContinue()
+boolean moveCards()
~void moveToSpace
-void activateEOPActions
-void activateCPEOPActions

}

class impossibleMoveException{
-Player player
-Space space
-Heading heading

}

class GearSpace{
-boolean direction

}

class ConveyorBelt{
-Heading heading
}

class Board{
-int checkpointAmount;
-int width
-int height
-String boardName
-Integer gameId
-Space[][] spaces
-List<Player> players
-Player current
-Player winner
-Space antennaSpace
-Phase phase
-int step
-boolean stepMode
-String[] buttonOptions
-int myPlayerNumber
-int myGameRoomNumber
+Board()
+void addCP()
+int counter
+int calculateDistance()


}

enum phase{
PROGRAMMING
ACTIVATION
INITIALIZATION
PLAYER-INTERACTION
}

enum Heading{
NORTH
WEST
SOUTH
EAST
}

enum Command{
FORWARD
RIGHT
LEFT
FAST_FORWARD
U_TURN
MOVE_THREE
MOVE_BACK
OPTION_LEFT_RIGHT
+String displayName
-List<Command> options
+boolean isInteractive()


}

abstract class subject{
+void attach
+void detach
#void notifyChange
}

class CommandCard {
+Command command

}

class CommandCardField {
+Player player
-CommandCard card
-boolean visible
+boolean isVisible()

}

class Player{
{static} +int NO_REGISTERS
{static} +int NO_CARDS
+Board board
-String name
-String color
-Heading heading
-int checkpointNumber
-Space space
-Heading heading
-CommandCardField[] program
-CommandCardField[] cards
}

class space{
+Board board
-List<Heading> walls2
-List<FieldAction> actions
+int x
+int y
~void playerChanged()
}

interface viewObserver{
#void update()
void update()
}

class BoardView{
-Board board
-GridPane mainBoardPane
-SpaceView[][] spaces
-PlayersView playersView
-Label statusLabel
-SpaceEventHandler spaceEventHandler

}
class SpaceEventHandler{
+GameController gameController
+void handle()

}

class PlayerView {
-Player player
-VBox top
-Label programLabel
-GridPane programPane
-Label cardsLabel
-GridPane cardsPane
-CardFieldView[] programCardViews
-CardFieldView[] cardViews
-VBox buttonPanel
-VBox buttonPanel2
-Button finishButton
-Button executeButton
-Button stepButton
-Button winningButton
-VBox playerInteractionPanel
-GameController gameController
+PlayerView()
+void updateView()

}

class CardFieldView {
+ {static} DataFormat ROBO_RALLY_CARD
+ {static} int CARDFIELD_WIDTH
+ {static} int CARDFIELD_HEIGHT
+ {static} Border BORDER
+ {static} Background BG_DEFAULT
+ {static} Background BG_DRAG
+ {static} Background BG_DROP
+ {static} Background BG_ACTIVE
+ {static} Background BG_DONE
-CommandCardField field
-Label label
-GameController gameController
-String cardFieldRepresentation()
-CommandCardField cardFieldFromRepresentation()
}

class PlayersView {
-Board board
-PlayerView playerViews
+PlayersView()
}

class RoboRallyMenuBar {
+RoboRallyMenuBar()
-AppController appController
-Menu controlMenu
-MenuItem saveGame
-MenuItem newGame
-MenuItem loadGame
-MenuItem stopGame
-MenuItem exitApp
+void update()
+void checkActions()
}

class SpaceView {
-{static} String[] conveyeurIMGs
-{static} String[] checkpointIMGs
-{static} String finishlineIMG
+{static} int SPACE_HEIGHT
+{static} int SPACE_WIDTH
+Space space
+void checkWalls()

}
class PopUpBoxView {
+String gameInstance()
+String loadGame()
+String leftOrRight()
}

class RoboRally {
-{static} int MIN_APP_WIDTH
-Stage stage
-BorderPane boardRoot
+void createBoardView()
+{static} void main()
}

class StartRoboRally{
+{static} void main()
}

BoardView +-- "SpaceEventHandler"
Checkpoint --|>  "FieldAction"
FinishLine  --|> "FieldAction"
GearSpace --|> "FieldAction"
ConveyorBelt--|>"FieldAction"
BoardView ..|> "viewObserver"
PlayerView ..|> "viewObserver"
PlayersView ..|> "viewObserver"
space "..*"*--"1"Board
space "1"*--"..*""FieldAction"
GameController "1"*--"1"Board
AppController "1"--*"1" GameController
Command"1"*--"1"CommandCard
CommandCard <|-- subject
subject *-- viewObserver
PlayerPositionGenerator +-- BoardAnPositionOutOfSyncException


@enduml