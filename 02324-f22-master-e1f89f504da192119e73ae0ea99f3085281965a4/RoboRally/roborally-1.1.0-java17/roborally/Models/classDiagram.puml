@startuml
'https://plantuml.com/sequence-diagram


class AppController{
-List<Integer> PLAYER_NUMBER_OPTIONS
-List<String> PLAYER_COLORS

}
Class Checkpoint{
-int checkpointsRequired
}
Abstract Class "FieldAction"{
+boolean doAction()
}
Class FinishLine{

}
class GameController{
+Board board
+ void startProgrammingPhase()
-commandCard generateRandomCommandCard()
+void finishProgrammingPhase()
-void makeProgramFieldsVisible()
-void makeProgramFieldsInvisible()
+void executePrograms()
+void executeStep()
+void continuePrograms()
-void executeNextStep()
-void executeCommand()
+void moveForward()
+void moveForward()
+void fastForward()
+void turnRight()
+void turnLeft()
+void leftOrRight()
+void uTurn()
+void moveThree()
+void moveBack()
+void executeCommandAndContinue()
+boolean moveCards()
~void moveToSpace
-void activateEOPActions
-void activateCPEOPActions

}
class impossibleMoveException{
-Player player
-Space space
-Heading heading

}
class GearSpace{
-boolean direction
}
class ConveyorBelt{
-Heading heading
}


class Board{
-int checkpointAmount;
-int width
-int height
-String boardName
-Integer gameId
-int step
+void setGameId()
+void addCP()
+Space getSpace()
+int getPlayersNumbers()
+Space getNeighbour
+String getStatusMessage()
+int counter
}
enum phase{
PROGRAMMING
ACTIVATION
INITIALIZATION
PLAYER-INTERACTION
}
enum Heading{
NORTH
WEST
SOUTH
EAST
}
enum Command{
FORWARD
RIGHT
LEFT
FAST_FORWARD
U_TURN
MOVE_THREE
MOVE_BACK
OPTION_LEFT_RIGHT
+String displayName
-List<Command> options
+boolean isInteractive()
+List<Command> getOptions()

}
abstract class subject{
+void attach
+void detach
#void notifyChange
}
class CommandCard {
+Command command

}
Class CommandCardField
class Player{
{static} +int NO_REGISTERS
{static} +int NO_CARDS
+Board board
-String name
-String color
-Heading heading
-CommandCardField[] program
-CommandCardField[] cards

}
class space{
+Board board
}
interface viewObserver{
#void update
void update
}

class BoardView{
-Board board
-GridPane mainBoardPane
-SpaceView[][] spaces
-PlayersView playersView
-Label statusLabel
-SpaceEventHandler spaceEventHandler
+BoardView()
+void updateView()

}
class SpaceEventHandler{
+GameController gameController
+SpaceEventHandler()
+void handle()

}
class PlayerView {
-Player player
-VBox top
-Label programLabel
-GridPane programPane
-Label cardsLabel
-GridPane cardsPane
-CardFieldView[] programCardViews
-CardFieldView[] cardViews
-VBox buttonPanel
-VBox buttonPanel2
-Button finishButton
-Button executeButton
-Button stepButton
-Button winningButton
-VBox playerInteractionPanel
-GameController gameController
+PlayerView()
+void updateView()


}
Class PlayersView {
-Board board
-PlayerView[] playerViews
+PlayersView()
}
Class RoboRallyMenuBar
Class SpaceView

BoardView +-- "SpaceEventHandler"
Checkpoint --|>  "FieldAction"
FinishLine  --|> "FieldAction"
GearSpace --|> "FieldAction"
ConveyorBelt--|>"FieldAction"
BoardView --|> "Vbox"
BoardView ..|> "viewObserver"
PlayerView ..|> "viewObserver"
PlayerView --|> Tab
PlayersView ..|> "viewObserver"
PlayersView --|> TabPane
space "..*"*--"1"Board
space "1"*--"..*""FieldAction"

GameController "1"*--"1"Board
AppController "1"--*"1" GameController
Command"1"*--"1"CommandCard
CommandCard <|-- subject
subject *-- viewObserver
@enduml